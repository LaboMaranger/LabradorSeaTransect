pch=c(1,19,1,19,1,19)),col=mypalette,space="right"))
xyplot(CRAM.num.sum[-c(38:47),3] ~ CRAM.num..sum[-c(38:47),2], group=CRAM.num..sum[-c(38:47),1],lwd=2,
xlim = c(0,90),
pch = c(1,19,1,19,1,19), type='b',xlab="Time(d)",
main=bquote(.(colnames(CRAM.num..sum[3]))), ylab = "# CRAM formulas",
par.settings=simpleTheme(col.line=mypalette, col=mypalette),
key = list(text = list(c("Epipelagic","Epipelagic","Mesopelagic",
"Mesopelagic","Bathypelagic","Bathypelagic"),
col=mypalette),lines = list(lwx=2,col=mypalette,type="b",
pch=c(1,19,1,19,1,19)),col=mypalette,space="right"))
xyplot(CRAM.num.sum[-c(38:47),3] ~ CRAM.num.sum[-c(38:47),2], group=CRAM.num..sum[-c(38:47),1],lwd=2,
xlim = c(0,90),
pch = c(1,19,1,19,1,19), type='b',xlab="Time(d)",
main=bquote(.(colnames(CRAM.num..sum[3]))), ylab = "# CRAM formulas",
par.settings=simpleTheme(col.line=mypalette, col=mypalette),
key = list(text = list(c("Epipelagic","Epipelagic","Mesopelagic",
"Mesopelagic","Bathypelagic","Bathypelagic"),
col=mypalette),lines = list(lwx=2,col=mypalette,type="b",
pch=c(1,19,1,19,1,19)),col=mypalette,space="right"))
xyplot(CRAM.num.sum[-c(38:47),3] ~ CRAM.num.sum[-c(38:47),2], group=CRAM.num..sum[-c(38:47),1],lwd=2,
xlim = c(0,90),
pch = c(1,19,1,19,1,19), type='b',xlab="Time(d)",
main=bquote(.(colnames(CRAM.num.sum[3]))), ylab = "# CRAM formulas",
par.settings=simpleTheme(col.line=mypalette, col=mypalette),
key = list(text = list(c("Epipelagic","Epipelagic","Mesopelagic",
"Mesopelagic","Bathypelagic","Bathypelagic"),
col=mypalette),lines = list(lwx=2,col=mypalette,type="b",
pch=c(1,19,1,19,1,19)),col=mypalette,space="right"))
xyplot(CRAM.num.sum[-c(38:47),3] ~ CRAM.num.sum[-c(38:47),2], group=CRAM.num.sum[-c(38:47),1],lwd=2,
xlim = c(0,90),
pch = c(1,19,1,19,1,19), type='b',xlab="Time(d)",
main=bquote(.(colnames(CRAM.num.sum[3]))), ylab = "# CRAM formulas",
par.settings=simpleTheme(col.line=mypalette, col=mypalette),
key = list(text = list(c("Epipelagic","Epipelagic","Mesopelagic",
"Mesopelagic","Bathypelagic","Bathypelagic"),
col=mypalette),lines = list(lwx=2,col=mypalette,type="b",
pch=c(1,19,1,19,1,19)),col=mypalette,space="right"))
mypalette = palette(c("black","black","red","red","green","green"))
mypath <- file.path("./Output Graphique/CRAM.pdf")
pdf(mypath,7,7)
print(xyplot(CRAM.num.sum[-c(38:47),3] ~ CRAM.num.sum[-c(38:47),2], group=CRAM.num.sum[-c(38:47),1],lwd=2,
xlim = c(0,90),
pch = c(1,19,1,19,1,19), type='b',xlab="Time(d)",
main=bquote(.(colnames(CRAM.num.sum[3]))), ylab = "# CRAM formulas",
par.settings=simpleTheme(col.line=mypalette, col=mypalette),
key = list(text = list(c("Epipelagic","Epipelagic","Mesopelagic",
"Mesopelagic","Bathypelagic","Bathypelagic"),
col=mypalette),lines = list(lwx=2,col=mypalette,type="b",
pch=c(1,19,1,19,1,19)),col=mypalette,space="right")))
dev.off()
pdf(mypath,7,7)
print(xyplot(CRAM.num.sum[-c(38:47),3] ~ CRAM.num.sum[-c(38:47),2], group=CRAM.num.sum[-c(38:47),1],lwd=2,
xlim = c(0,90),
pch = c(1,19,1,19,1,19), type='b',xlab="Time(d)",
main=bquote(.(colnames(CRAM.num.sum[3]))), ylab = "# CRAM formulas",
par.settings=simpleTheme(col.line=mypalette, col=mypalette),
key = list(text = list(c("Epipelagic","Epipelagic","Mesopelagic",
"Mesopelagic","Bathypelagic","Bathypelagic"),
col=mypalette),lines = list(lwx=2,col=mypalette,type="b",
pch=c(1,19,1,19,1,19)),col=mypalette,space="right")))
dev.off()
library("lattice")
mypalette = palette(c("#73BAE6","#73BAE6","#C7144C","#C7144C","#33a02c","#33a02c"))
mypalette = palette(c("#73BAE6","#73BAE6","#C7144C","#C7144C","#33a02c","#33a02c"))
mypalette = palette(c("#73BAE6","#73BAE6","#C7144C","#C7144C","#33a02c","#33a02c"))
View(FTMS)
FTMS.summary = read.csv("./Input data/summary_table_tresh.csv", sep=",", header=T, row.names=1)
View(FTMS.summary)
FTMS.summary = read.csv("./Input data/summary_table_tresh.csv", sep=";", header=T, row.names=1)
FTMS.summary = read.csv("./Input data/summary_table_tresh.csv", sep=";", header=T)
mypalette = palette(c("#73BAE6","#73BAE6","#C7144C","#C7144C","#33a02c","#33a02c"))
mypath <- file.path("./Output Graphique/FTMS.pdf")
mypath <- file.path("./Output Graphique/FTMS.pdf")
pdf(mypath,7,7)
for(i in 3:length(FTMS.summary[1,]))
{
print(xyplot(
FTMS.summary[,i] ~ FTMS.summary[,"Time"],
data =  FTMS.summary,
group = FTMS.summary[,"ID"],
lwd = 2,
pch = c(1,19,1,19,1,19),
type = 'b',
xlab = "Time(d)",
main = bquote(.(colnames(FTMS.summary[i]))),
ylab = "nM",
par.settings = simpleTheme(col.line = mypalette,
col = mypalette),
key = list(text = list(as.character(unique(FTMS.summary[,"ID"])),
col = mypalette),
lines = list(lwx=2 ,
col = mypalette,
type = "b",
pch = c(1,19,1,19,1,19)),
col = mypalette,
space = "right")))
}
mypath <- file.path("./Output Graphique/FTMS.pdf")
getwd()
pdf(mypath,7,7)
for(i in 3:length(FTMS.summary[1,]))
{
print(xyplot(
FTMS.summary[,i] ~ FTMS.summary[,"Time"],
data =  FTMS.summary,
group = FTMS.summary[,"ID"],
lwd = 2,
pch = c(1,19,1,19,1,19),
type = 'b',
xlab = "Time(d)",
main = bquote(.(colnames(FTMS.summary[i]))),
ylab = "nM",
par.settings = simpleTheme(col.line = mypalette,
col = mypalette),
key = list(text = list(as.character(unique(FTMS.summary[,"ID"])),
col = mypalette),
lines = list(lwx=2 ,
col = mypalette,
type = "b",
pch = c(1,19,1,19,1,19)),
col = mypalette,
space = "right")))
}
dev.off()
FTMS.summary = FTMS.summary[order(FTMS.summary[,"ID", FTMS.summary[,"Time"]]),]
View(FTMS.summary)
pdf(mypath,7,7)
for(i in 3:length(FTMS.summary[1,]))
{
print(xyplot(
FTMS.summary[c(1:37),i] ~ FTMS.summary[c(1:37),"Time"],
data =  FTMS.summary,
group = FTMS.summary[c(1:37),"ID"],
lwd = 2,
pch = c(1,19,1,19,1,19),
type = 'b',
xlab = "Time(d)",
main = bquote(.(colnames(FTMS.summary[i]))),
ylab = "nM",
par.settings = simpleTheme(col.line = mypalette,
col = mypalette),
key = list(text = list(as.character(unique(FTMS.summary[c(1:37),"ID"])),
col = mypalette),
lines = list(lwx=2 ,
col = mypalette,
type = "b",
pch = c(1,19,1,19,1,19)),
col = mypalette,
space = "right")))
}
dev.off()
CRAM_changes
CRAM_changes.rel
(1620-1657)/1657
CRAM_changes - CRAM_changes[1,]
CRAM_changes
bob = sweep(CRAM_changes, 1, CRAM_changes[1,])
bob
(1672-1727)
Row1 = CRAM_changes[1,]
Row1
bob = sweep(CRAM_changes, 1, Row1)
bob
dim(CRAM_changes)
CRAM_changes[2,]-Row1
CRAM_changes[1,]-Row1
CRAM_changes[2,]-Row1
CRAM_changes[3,]-Row1
CRAM_changes[4,]-Row1
?sweep
Row1
Row1 = as.vector(CRAM_changes[1,])
Row1
CRAM_changes.rel = sweep(CRAM_changes, 1, Row1, FUN = "-")
CRAM_changes.rel
Row1
CRAM_changes[3,] - Row1
CRAM_changes.rel = sweep(x = CRAM_changes, MARGIN = 1, STATS = Row1, FUN = function(x,y) {(x-y)/y*100})
CRAM_changes.rel
FTMS=read.csv("./Input data/renormalized_crosstable_tresh.csv", sep=",", header=T, row.names=1)
FTMS = FTMS[,c("Molecular.Formula","Theor_mz","DBE","HC","OC","NC","C","H","N","O","S","AI","AImod","NOSC",
"Count","Compound.category","Class","I3","G5", "F3","F1","D4","G9","F6", "E1", "G8","G3","I1",
"G7","H1","E4","D8","F7","E7","D3","F4","D5","F2","G2","G6","H2","D6","D2","G4","E6","E8","H9",
"H3","D7","E9","H5","E5","H7","F9","H8","D1","E3","H4","I2","F8","E2","D9","F5","H6","G1")]
colnames(FTMS) = c("Molecular.Formula","Theor_mz","DBE","HC","OC","NC","C","H","N","O","S","AI","AImod","NOSC",
"Count","Compound.category","Class","20m in situ","M1T4","M1T7","M1T15","M1T20","M1T30",
"M1T90","M2T0","M2T7","M2T15","M2T20","M2T30","M2T90","M3T0","M3T7","M3T15","M3T30","M4T0",
"M4T4","M4T7","M4T15","M4T20","M4T30","M4T90","M5T0","M5T4","M5T7","M5T15","M5T20","M5T30",
"M5T90","M6T0","M6T4","M6T7","M6T15","M6T20","M6T30","M6T90","M7T4","M7T20","M7T30","M7T90",
"M8T0","M8T4","M8T7","M8T15","M8T20","M8T90")
FTMS = cbind(FTMS[,c(1:17)], round(FTMS[,c(18:65)],digits = 8))
FTMS.summary = read.csv("./Input data/summary_table_tresh.csv", sep=";", header=T)
library("vegan")
library("vegan")
library("fields")
library("lattice")
CRAM.function = function(data)
{
DBE_C = data$DBE / data$C
DBE_H = data$DBE / data$H
DBE_O = data$DBE / data$O
DBE_C1 = ifelse(0.3 <= DBE_C & DBE_C <= 0.68,1,0)
DBE_H1 = ifelse(0.2 <= DBE_H & DBE_H <= 0.95,1,0)
DBE_O1 = ifelse(0.77 <= DBE_O & DBE_O <= 1.75,1,0)
CRAM = ifelse(DBE_C1 + DBE_H1 + DBE_O1 == 3 ,1,0)
return(CRAM)
}
CRAM = CRAM.function(FTMS)
CRAM.prop = as.numeric(CRAM) * FTMS[,c(19:65)]
CRAM.prop.sum = colSums(CRAM.prop)
Trait = c("M1","M1","M1","M1","M1", "M1",
"M2","M2","M2","M2","M2", "M2",
"M3","M3","M3", "M3",
"M4","M4","M4","M4","M4","M4","M4",
"M5","M5","M5","M5","M5","M5", "M5",
"M6","M6","M6","M6","M6","M6","M6",
"M7","M7","M7", "M7",
"M8", "M8","M8","M8","M8", "M8")
Time = c(4,7,15,20,30, 90,
0,7,15,20,30, 90,
0,7,15, 30,
0,4,7,15,20,30,90,
0,4,7,15,20,30, 90,
0,4,7,15,20,30,90,
4,20,30, 90,
0, 4,7,15,20, 90)
CRAM.sum = data.frame(Trait,Time,CRAM.prop.sum)
CRAM.number = ifelse(CRAM.prop>0, 1, 0)
CRAM.number.sum = colSums(CRAM.number)
CRAM.num.sum = data.frame(Trait,Time,CRAM.number.sum)
CRAM_EPI_ini_num = CRAM.num.sum[Trait=="M2" & Time ==0,3]
CRAM_MESO_ini_num = mean(CRAM.num.sum[Trait=="M3" & Time ==0,3],  CRAM.num.sum[Trait=="M4" & Time ==0,3])
CRAM_BATHY_ini_num = mean(CRAM.num.sum[Trait=="M5" & Time ==0,3], CRAM.num.sum[Trait=="M6" & Time ==0,3])
CRAM_EPI_15_num = mean(CRAM.num.sum[Trait=="M1" & Time == 15,3], CRAM.num.sum[Trait=="M2" & Time == 15,3])
CRAM_MESO_15_num = mean(CRAM.num.sum[Trait=="M3" & Time == 15,3], CRAM.num.sum[Trait=="M4" & Time == 15,3])
CRAM_BATHY_15_num = mean(CRAM.num.sum[Trait=="M5" & Time == 15,3], CRAM.num.sum[Trait=="M6" & Time == 15,3])
CRAM_EPI_30_num = mean(CRAM.num.sum[Trait=="M1" & Time == 30,3], CRAM.num.sum[Trait=="M2" & Time == 30,3])
CRAM_MESO_30_num = mean(CRAM.num.sum[Trait=="M3" & Time == 30,3], CRAM.num.sum[Trait=="M4" & Time == 30,3])
CRAM_BATHY_30_num = mean(CRAM.num.sum[Trait=="M5" & Time == 30,3], CRAM.num.sum[Trait=="M6" & Time == 30,3])
CRAM_EPI_90_num = mean(CRAM.num.sum[Trait=="M1" & Time == 90,3], CRAM.num.sum[Trait=="M2" & Time == 90,3])
CRAM_MESO_90_num = CRAM.num.sum[Trait=="M4" & Time == 90,3]
CRAM_BATHY_90_num = mean(CRAM.num.sum[Trait=="M5" & Time == 90,3], CRAM.num.sum[Trait=="M6" & Time == 90,3])
CRAM_changes = as.matrix(data.frame(Epi = c(CRAM_EPI_ini_num, CRAM_EPI_15_num, CRAM_EPI_30_num, CRAM_EPI_90_num),
Meso = c(CRAM_MESO_ini_num, CRAM_MESO_15_num, CRAM_MESO_30_num, CRAM_MESO_90_num),
Bathy = c(CRAM_BATHY_ini_num, CRAM_BATHY_15_num, CRAM_BATHY_30_num, CRAM_BATHY_90_num)))
rownames(CRAM_changes) = c("Day 0" ,"Day 15", "Day 30", "Day 90")
CRAM_changes
Row1 = as.vector(CRAM_changes[1,])
CRAM_changes.rel = sweep(x = CRAM_changes, MARGIN = 1, STATS = Row1, FUN = function(x,y) {(x-y)/y*100})
CRAM_changes.rel
(1727-1672)/1672
Row1
CRAM_changes.rel = sweep(x = CRAM_changes, MARGIN = 1, STATS = Row1, FUN = function(x,y) {(x-y)/y*100}, check.margin = FALSE)
CRAM_changes.rel
CRAM_changes[,1]
CRAM_changes[1,]
CRAM_changes[2,]
CRAM_changes[3,]
CRAM_changes[4,]
apply(CRAM_changes, 1, function(x) {(x-Row1)/Row1*100})
t(apply(CRAM_changes, 1, function(x) {(x-Row1)/Row1*100}))
CRAM_changes.rel = sweep(x = CRAM_changes,
MARGIN = 2,
STATS = Row1,
FUN = function(x,y) {(x-y)/y*100})
CRAM_changes.rel
CRAM_changes.rel = sweep(x = CRAM_changes,
MARGIN = 2,
STATS = CRAM_changes[1,],
FUN = function(x,y) {(x-y)/y*100})
CRAM_changes.rel
CRAM_EPI_ini = CRAM.prop.sum[Trait=="M2" & Time ==0]
CRAM_MESO_ini = mean(CRAM.prop.sum[Trait=="M3" & Time ==0],  CRAM.prop.sum[Trait=="M4" & Time ==0])
CRAM_BATHY_ini = mean(CRAM.prop.sum[Trait=="M5" & Time ==0], CRAM.prop.sum[Trait=="M6" & Time ==0])
CRAM_EPI_15 = mean(CRAM.prop.sum[Trait=="M1" & Time == 15], CRAM.prop.sum[Trait=="M2" & Time == 15])
CRAM_MESO_15 = mean(CRAM.prop.sum[Trait=="M3" & Time == 15], CRAM.prop.sum[Trait=="M4" & Time == 15])
CRAM_BATHY_15 = mean(CRAM.prop.sum[Trait=="M5" & Time == 15], CRAM.prop.sum[Trait=="M6" & Time == 15])
CRAM_EPI_30 = mean(CRAM.prop.sum[Trait=="M1" & Time == 30], CRAM.prop.sum[Trait=="M2" & Time == 30])
CRAM_MESO_30 = mean(CRAM.prop.sum[Trait=="M3" & Time == 30], CRAM.prop.sum[Trait=="M4" & Time == 30])
CRAM_BATHY_30 = mean(CRAM.prop.sum[Trait=="M5" & Time == 30], CRAM.prop.sum[Trait=="M6" & Time == 30])
CRAM_EPI_90 = mean(CRAM.prop.sum[Trait=="M1" & Time == 90], CRAM.prop.sum[Trait=="M2" & Time == 90])
CRAM_MESO_90 = CRAM.prop.sum[Trait=="M4" & Time == 90]
CRAM_BATHY_90 = mean(CRAM.prop.sum[Trait=="M5" & Time == 90], CRAM.prop.sum[Trait=="M6" & Time == 90])
DeltaCRAM = as.matrix(data.frame(Epi = c((CRAM_EPI_15 - CRAM_EPI_ini)/CRAM_EPI_ini *100,
(CRAM_EPI_30 - CRAM_EPI_ini)/CRAM_EPI_ini *100,
(CRAM_EPI_90 - CRAM_EPI_ini)/CRAM_EPI_ini *100),
Meso = c((CRAM_MESO_15 - CRAM_MESO_ini)/CRAM_MESO_ini *100,
(CRAM_MESO_30 - CRAM_MESO_ini)/CRAM_MESO_ini *100,
(CRAM_MESO_90 - CRAM_MESO_ini)/CRAM_MESO_ini *100),
Bathy = c((CRAM_BATHY_15 - CRAM_BATHY_ini)/CRAM_BATHY_ini *100,
(CRAM_BATHY_30 - CRAM_BATHY_ini)/CRAM_BATHY_ini *100,
(CRAM_BATHY_90 - CRAM_BATHY_ini)/CRAM_BATHY_ini *100)))
rownames(DeltaCRAM) = c("Day 15", "Day 30", "Day 90")
DeltaCRAM
DeltaCRAM = as.matrix(data.frame(Epi = c(CRAM_EPI_ini, CRAM_EPI_15, CRAM_EPI_30, CRAM_EPI_90),
Meso = c(CRAM_MESO_ini, CRAM_MESO_15, CRAM_MESO_30, CRAM_MESO_90),
Bathy = c(CRAM_BATHY_ini, CRAM_BATHY_15, CRAM_BATHY_30, CRAM_BATHY_90)))
CRAM.abun.rel = sweep(x = CRAM.abun,
MARGIN = 2,
STATS = CRAM.abun[1,],
FUN = function(x,y) {(x-y)/y*100})
CRAM.abun = as.matrix(data.frame(Epi = c(CRAM_EPI_ini, CRAM_EPI_15, CRAM_EPI_30, CRAM_EPI_90),
Meso = c(CRAM_MESO_ini, CRAM_MESO_15, CRAM_MESO_30, CRAM_MESO_90),
Bathy = c(CRAM_BATHY_ini, CRAM_BATHY_15, CRAM_BATHY_30, CRAM_BATHY_90)))
CRAM.abun.rel = sweep(x = CRAM.abun,
MARGIN = 2,
STATS = CRAM.abun[1,],
FUN = function(x,y) {(x-y)/y*100})
rownames(CRAM.abun.rel) = c("Day 0","Day 15", "Day 30", "Day 90")
CRAM.abun.rel
CRAM.abun
rownames(CRAM.abun) = c("Day 0","Day 15", "Day 30", "Day 90")
CRAM.abun
CRAM.abun = as.matrix(data.frame(Epi = c(CRAM_EPI_ini, CRAM_EPI_15, CRAM_EPI_30, CRAM_EPI_90),
Meso = c(CRAM_MESO_ini, CRAM_MESO_15, CRAM_MESO_30, CRAM_MESO_90),
Bathy = c(CRAM_BATHY_ini, CRAM_BATHY_15, CRAM_BATHY_30, CRAM_BATHY_90)))/10000
CRAM.abun.rel = sweep(x = CRAM.abun,
MARGIN = 2,
STATS = CRAM.abun[1,],
FUN = function(x,y) {(x-y)/y*100})
CRAM.abun
rownames(CRAM.abun.rel) = c("Day 0","Day 15", "Day 30", "Day 90")
CRAM.abun.rel
View(FTMS.summary[c(1:37),])
VIew(FTMS.summary)
View(FTMS.summary)
FTMS.summary = FTMS.summary[order(FTMS.summary[,"ID", FTMS.summary[,"Time"]]),]
View(FTMS.summary)
View(FTMS.summary[c(1:37),])
FTMS.summary.treat = FTMS.summary[order(FTMS.summary[,"ID", FTMS.summary[,"Time"]]),]
mypalette = palette(c("#73BAE6","#73BAE6","#C7144C","#C7144C","#33a02c","#33a02c"))
mypalette = palette(c("#73BAE6","#73BAE6","#C7144C","#C7144C","#33a02c","#33a02c"))
mypath <- file.path("./Output Graphique/FTMS.pdf")
pdf(mypath,7,7)
pdf(mypath,7,7)
pdf(mypath,7,7)
pdf(mypath,7,7)
for(i in 3:length(FTMS.summary.treat[1,]))
{
print(xyplot(
FTMS.summary.treat[,i] ~ FTMS.summary.treat[,"Time"],
data =  FTMS.summary.treat,
group = FTMS.summary.treat[,"ID"],
lwd = 2,
pch = c(1,19,1,19,1,19),
type = 'b',
xlab = "Time(d)",
main = bquote(.(colnames(FTMS.summary.treat[i]))),
ylab = "nM",
par.settings = simpleTheme(col.line = mypalette,
col = mypalette),
key = list(text = list(as.character(unique(FTMS.summary.treat[,"ID"])),
col = mypalette),
lines = list(lwx=2 ,
col = mypalette,
type = "b",
pch = c(1,19,1,19,1,19)),
col = mypalette,
space = "right")))
}
dev.off()
View(FTMS.summary.treat)
?subset
rm(FTMS.summary.treat)
MySub = FTMS.summary[,"ID"] %in% c("M1", "M2", "M3", "M4", "M5", "M6")
FTMS.sub = FTMS.summary[MySub,]
View(FTMS.sub)
FTMS.summary = read.csv("./Input data/summary_table_tresh.csv", sep=";", header=T)
library("vegan")
library("fields")
library("lattice")
MySub = FTMS.summary[,"ID"] %in% c("M1", "M2", "M3", "M4", "M5", "M6")
FTMS.sub = FTMS.summary[MySub,]
View(FTMS.sub)
mypalette = palette(c("#73BAE6","#73BAE6","#C7144C","#C7144C","#33a02c","#33a02c"))
pdf(mypath,7,7)
for(i in 3:length(FTMS.summary.treat[1,]))
{
print(xyplot(
FTMS.sub[,i] ~ FTMS.sub[,"Time"],
data =  FTMS.sub,
group = FTMS.sub[,"ID"],
lwd = 2,
pch = c(1,19,1,19,1,19),
type = 'b',
xlab = "Time(d)",
main = bquote(.(colnames(FTMS.sub[i]))),
ylab = "nM",
par.settings = simpleTheme(col.line = mypalette,
col = mypalette),
key = list(text = list(as.character(unique(FTMS.sub[,"ID"])),
col = mypalette),
lines = list(lwx=2 ,
col = mypalette,
type = "b",
pch = c(1,19,1,19,1,19)),
col = mypalette,
space = "right")))
}
pdf(mypath,7,7)
for(i in 3:length(FTMS.sub[1,]))
{
print(xyplot(
FTMS.sub[,i] ~ FTMS.sub[,"Time"],
data =  FTMS.sub,
group = FTMS.sub[,"ID"],
lwd = 2,
pch = c(1,19,1,19,1,19),
type = 'b',
xlab = "Time(d)",
main = bquote(.(colnames(FTMS.sub[i]))),
ylab = "nM",
par.settings = simpleTheme(col.line = mypalette,
col = mypalette),
key = list(text = list(as.character(unique(FTMS.sub[,"ID"])),
col = mypalette),
lines = list(lwx=2 ,
col = mypalette,
type = "b",
pch = c(1,19,1,19,1,19)),
col = mypalette,
space = "right")))
}
dev.off()
length(FTMS.sub[1,])
pdf(mypath,7,7)
for(i in 3:length(FTMS.sub[1,]))
{
print(xyplot(
FTMS.sub[,i] ~ FTMS.sub[,2],
data =  FTMS.sub,
group = FTMS.sub[,1],
lwd = 2,
pch = c(1,19,1,19,1,19),
type = 'b',
xlab = "Time(d)",
main = bquote(.(colnames(FTMS.sub[i]))),
ylab = "nM",
par.settings = simpleTheme(col.line = mypalette,
col = mypalette),
key = list(text = list(as.character(unique(FTMS.sub[,1])),
col = mypalette),
lines = list(lwx=2 ,
col = mypalette,
type = "b",
pch = c(1,19,1,19,1,19)),
col = mypalette,
space = "right")))
}
dev.off()
class(FTMS.sub[,2])
View(FTMS.sub)
data = read.table("MetaboPostImput.csv",sep = ";", header=T)
setwd("D:/Université/Chapitre 2 - DOM quality, environmental factors and PCC influences on mtabolism/Input")
data = read.table("MetaboPostImput.csv",sep = ";", header=T)
library("vegan")
library("adespatial")
attach(data)
Watermass = factor(Watermass, levels=levels(Watermass)[c(3,1,2)])
RatioCN = DOC/DON
P_Peak_AC = Peak_AC / (Peak_AC + Peak_B + Peak_D + Peak_M + Peak_T) * 100
P_Peak_B = Peak_B / (Peak_AC + Peak_B + Peak_D + Peak_M + Peak_T) * 100
P_Peak_D = Peak_D / (Peak_AC + Peak_B + Peak_D + Peak_M + Peak_T) * 100
P_Peak_M = Peak_M / (Peak_AC + Peak_B + Peak_D + Peak_M + Peak_T) * 100
P_Peak_T = Peak_T / (Peak_AC + Peak_B + Peak_D + Peak_M + Peak_T) * 100
shapiro.vec <- rep(1,dim(data[,-c(1:10)])[2])
names(shapiro.vec) = colnames(data[,-c(1:10)])
for(i in 11:dim(data)[2]) shapiro.vec[i-10] = shapiro.test(data[,i])[[2]]
shapiro.vec
which(colnames(data == "L.Asx"))
which(colnames(data) == "L.Asx")
cor(data)
cor(data[,-c(1,2)])
cor(data[,-c(1,2,3)])
round(cor(data[,-c(1,2,3)]),2)
write.csv(round(cor(data[,-c(1,2,3)]),2), "cor.csv", fileEncoding = "UTF-8")
plot(data)
plot(data)
plot(data)
shapiro.vec
which(colnames(data == "L.Asx"))
which(colnames(data) == "L.Asx")
rda.aa = rda(data[,c(51:70)])
plot(rda.aa)
text(rda.aa, display = "sp")
rda.aa = rda(decostand(data[,c(51:70)], method = "normalize"))
plot(rda.aa)
text(rda.aa, display = "sp")
summary(rda.aa)
rda.aa = rda(decostand(data[,c("THAA", "Percent.DAA", "Percent.TOC.AA", "Percent.TON.AA", "C.AA.yields", "N.AA.yields", "DI", "RI", 51:70)], method = "normalize"))
which(colnames(data) == "THAA")
which(colnames(data) == "RI")
rda.aa = rda(decostand(data[,c(30:37, 51:70)], method = "normalize"))
plot(rda.aa)
text(rda.aa, display = "sp")
summary(rda.aa)
cor(data$Gly, data$Percent.DAA)
cor(decostand(data$Gly,method="normalize"), decostand(data$Percent.DAA, method = "normalize"))
N.AA.yields
which(colnames(data)=="Gly")
which(colnames(data)=="Arg")
which(colnames(data)=="THAA")
which(colnames(data)=="THAA")
which(colnames(data)=="Percent.DAA")
which(colnames(data)=="N.AA.yields")
which(colnames(data) == "a440")
which(colnames(data) == "Peak_T") #38
rda.cdom = rda(decostand(cbind(data[,c(38:77)],P_Peak_AC,P_Peak_B,P_Peak_D,P_Peak_M,P_Peak_T), method = "normalize"))
rda.cdom = rda(decostand(cbind(data[,c(38:47)],P_Peak_AC,P_Peak_B,P_Peak_D,P_Peak_M,P_Peak_T), method = "normalize"))
plot(rda.cdom)
text(rda.cdom, display = "sp")
decostand(cbind(data[,c(38:47)],P_Peak_AC,P_Peak_B,P_Peak_D,P_Peak_M,P_Peak_T), method = "normalize")
